var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SeqLoggers","category":"page"},{"location":"#SeqLoggers","page":"Home","title":"SeqLoggers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SeqLoggers]","category":"page"},{"location":"#SeqLoggers.SeqLogger-Tuple{AbstractString}","page":"Home","title":"SeqLoggers.SeqLogger","text":"SeqLogger(\n    server_url::AbstractString;\n    min_level::Logging.LogLevel=Logging.Info,\n    api_key::AbstractString=\"\",\n    batch_size::Int=10,\n    event_properties...\n)\n\nLogger to post log events to a Seq log server.\n\nInputs\n\nserver_url – Seq server url (e.g. \"http://localhost:5341\")\nmin_level – (optional, default=Logging.Info) minimal log level to filter the log events\napi_key –  (optional, default=\"\") API-key string for registered Applications\nbatch_size – (optional, default=10) number of log events sent to Seq server in single post\nevent_properties – (optional) global log event properties\n\nGlobal Log Event Properties\n\nThe SeqLogger constructor allows to add global log event properties to the logger using   keyword-arguments.\n\nSeqLogger(\"http://localhost:5341\"; App=\"DJSON\", Env=\"PROD\", Id=\"24e0d145-d385-424b-b6ec-081aa17d504a\")\n\nLocal Log Event Properties\n\nFor each individual log event, additional log event properties can be added which only apply to a single log event.\n\n@info \"Log additional user id {userId}\" userId=\"1\"\n\nNote: This only works, if the Logging.current_logger is of type SeqLogger or \"contains\" a SeqLogger.\n\n\n\n\n\n","category":"method"},{"location":"#Logging.handle_message-Tuple{SeqLogger,Vararg{Any,N} where N}","page":"Home","title":"Logging.handle_message","text":"Logging.handle_message(logger::SeqLogger, args...; kwargs...)\n\nExtends the function Logging.handle_message for SeqLoggers.\n\nNote\n\nIf the event batch of the logger is \"full\", the log events are flushed.\nA ReentrantLock is used to make the logger thread-safe. \n\n\n\n\n\n","category":"method"},{"location":"#Logging.with_logger-Tuple{Function,LoggingExtras.TeeLogger}","page":"Home","title":"Logging.with_logger","text":"Logging.with_logger(@nospecialize(f::Function), demuxLogger::TeeLogger)\n\nExtends the method Logging.with_logger to work for a LoggingExtras.TeeLogger containing a SeqLogger.\n\nNote\n\nThis constitutes as type piracy and should be treated with caution. But it is necessary such that also TeeLoggers that contain a SeqLogger do flush  the log events after exiting the with_logger function.\n\n\n\n\n\n","category":"method"},{"location":"#Logging.with_logger-Tuple{Function,SeqLogger}","page":"Home","title":"Logging.with_logger","text":"Logging.with_logger(@nospecialize(f::Function), logger::SeqLogger)\n\nExtends the function Logging.with_logger for SeqLoggers.\n\nNote\n\nAfter running the function f, the SeqLogger needs to flush the log events to make sure that the entire log batch is sent to the Seq server.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.event_property!-Tuple{LoggingExtras.TeeLogger}","page":"Home","title":"SeqLoggers.event_property!","text":"event_property!(teelogger::LoggingExtras.TeeLogger; kwargs...)\n\nExtend event_property! to a work for a LoggingExtras.TeeLogger containing a SeqLogger.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.event_property!-Tuple{SeqLogger}","page":"Home","title":"SeqLoggers.event_property!","text":"event_property!(logger::SeqLogger; kwargs...)\n\nAdd one or more event properties to the list of global event properties in logger.\n\nExample\n\nevent_property!(logger, user=\"Me\", userId=1)\n\nNote\n\nIf a new event property with identical name as an existing on is added with event_property!, the existing property in new_event_properties is not replaced, the new property is just added to new_event_properties. However, this still works since on the Seq side the raw post events considers the last property key as the final one if more than one has the same key.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.flush_current_logger-Tuple{}","page":"Home","title":"SeqLoggers.flush_current_logger","text":"flush_current_logger()\n\nPost the events in the logger batch event for the logger for the current task, or the global logger if none is attached to the task.\n\nNote\n\nIn the main moduel of Atom, the current_logger is Atom.Progress.JunoProgressLogger(). Therefore, if you set SeqLogger as a Logging.global_logger in in Atom use flush_global_logger.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.flush_events-Tuple{LoggingExtras.TeeLogger}","page":"Home","title":"SeqLoggers.flush_events","text":"flush_events(teeLogger::LoggingExtras.TeeLogger)\n\nExtend flush_events to a work for a LoggingExtras.TeeLogger containing a SeqLogger.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.flush_events-Tuple{SeqLogger}","page":"Home","title":"SeqLoggers.flush_events","text":"flush_events(logger::SeqLogger)\n\nPost all log events contained in the event batch of logger to the Seq server and  clear the event batch afterwards.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.flush_global_logger-Tuple{}","page":"Home","title":"SeqLoggers.flush_global_logger","text":"flush_global_logger()\n\nPost the events in the logger batch event for the global logger.\n\nNote\n\nIf the logger is run with Logging.with_logger, this is considered a current logger Logging.current_logger and  flush_current_logger. needs to be used.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.joinurl-Tuple{AbstractString,AbstractString}","page":"Home","title":"SeqLoggers.joinurl","text":"joinurl(left::AbstractString, right::AbstractString)\n\nJoin the left and right part of a URL, by removing trailing frontslashes and add an additional frontslashes if required.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.parse_event_str_from_args-Tuple{SeqLogger,NamedTuple}","page":"Home","title":"SeqLoggers.parse_event_str_from_args","text":"parse_event_str_from_args(logger::SeqLogger, message_args::NamedTuple)::String\n\nCreate a log event string from the named tuple message_args.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.post_log_events-Tuple{SeqLogger,AbstractString}","page":"Home","title":"SeqLoggers.post_log_events","text":"post_request(logger::SeqLogger, json_str::AbstractString)\n\nSend POST request with body json_str to Seq server.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.stringify-Tuple{}","page":"Home","title":"SeqLoggers.stringify","text":"stringify(; kwargs...)\n\nConvert keywords arguments into a string that conforms the log event message structure used in the Seq logger.\n\n\n\n\n\n","category":"method"}]
}
