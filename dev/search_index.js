var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SeqLoggers","category":"page"},{"location":"#SeqLoggers","page":"Home","title":"SeqLoggers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SeqLoggers]","category":"page"},{"location":"#SeqLoggers.SeqLogger","page":"Home","title":"SeqLoggers.SeqLogger","text":"SeqLogger(serverUrl=\"http://localhost:5341\", postType=Serial();\n          minLevel=Logging.Info,\n          apiKey=\"\",\n          batchSize=10,\n          kwargs...)\n\nLogger to post log events to a Seq log server.\n\nInputs\n\nserverUrl – (optional, default=\"http://localhost:5341\") Seq server url\npostType – (optional, default=Serial()) defines how HTTP posts the log events\nminLevel – (optional, default=Logging.Info) minimal log level required to post events\napiKey –  (optional, default=\"\") API-key string for registered Applications\nbatchSize – (optional, default=10) number of log events sent to Seq server in single post\nkwargs – (optional) global log event properties\n\nGlobal Log Event Properties\n\nThe user can provide the logger with global log event properties by using the keyword-arguments kwargs.\n\nSeqLogger(; App=\"DJSON\", Env=\"PROD\", Id=\"24e0d145-d385-424b-b6ec-081aa17d504a\")\n\nLocal Log Event Properties\n\nFor each individual log event, additional log event properties can be added which only apply to the respective log event.\n\n@info \"Log additional user id {userId}\" userId=\"1\"\n\nThis only works, if the Logging.current_logger is of type SeqLogger.\n\n\n\n\n\n","category":"type"},{"location":"#Logging.with_logger-Tuple{Function,LoggingExtras.TeeLogger}","page":"Home","title":"Logging.with_logger","text":"Logging.with_logger(@nospecialize(f::Function), demuxLogger::TeeLogger)\n\nExtends the method Logging.with_logger to work for a LoggingExtras.TeeLogger containing a SeqLogger.\n\nNote\n\nThis constitutes as type piracy and should be treated with caution.\n\n\n\n\n\n","category":"method"},{"location":"#Logging.with_logger-Tuple{Function,SeqLogger}","page":"Home","title":"Logging.with_logger","text":"Logging.with_logger(@nospecialize(f::Function), logger::SeqLogger)\n\nExtends the method Logging.with_logger to work for a SeqLogger.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.event_property!-Tuple{SeqLogger}","page":"Home","title":"SeqLoggers.event_property!","text":"event_property!(logger::SeqLogger; kwargs...)\n\nAdd one or more event properties to the list of global event properties in logger.\n\nExample\n\nevent_property!(logger, user=\"Me\", userId=1)\n\nNote\n\nIf a new event property with identical name as an existing on is added with event_property!, the existing property in newEventProperties is not replaced, the new property is just added to newEventProperties. However, this still works since on the Seq side the raw post events considers the last property key as the final one if more than one has the same key.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.flush_current_logger-Tuple{}","page":"Home","title":"SeqLoggers.flush_current_logger","text":"flush_current_logger()\n\nPost the events in the logger batch event for the logger for the current task, or the global logger if none is attached to the task.\n\nNote\n\nIn the main moduel of Atom, the current_logger is Atom.Progress.JunoProgressLogger(). Therefore, if you set SeqLogger as a Logging.global_logger in in Atom use flush_global_logger.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.flush_events-Tuple{LoggingExtras.TeeLogger}","page":"Home","title":"SeqLoggers.flush_events","text":"flush_events(teeLogger::LoggingExtras.TeeLogger)\n\nExtend flush_events to a work for a LoggingExtras.TeeLogger containing a SeqLogger.\n\n\n\n\n\n","category":"method"},{"location":"#SeqLoggers.flush_global_logger-Tuple{}","page":"Home","title":"SeqLoggers.flush_global_logger","text":"flush_global_logger()\n\nPost the events in the logger batch event for the global logger.\n\nNote\n\nIf the logger is run with Logging.with_logger, this is considered a current logger Logging.current_logger and  flush_current_logger. needs to be used.\n\n\n\n\n\n","category":"method"}]
}
